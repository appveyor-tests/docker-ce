build_script:
- ps: . .\load-narrative.ps1

test_script:

- ps: _
# Docker CE (Community Edition) can run both Windows and Linux containers on the same machine and its Edge version could be installed on Windows Server 2016. To run Linux containers Docker CE provisions "MobyLinux" Hyper-V VM with Linux and Docker daemon installed.
# Windows containers are natively supported in Windows Server 2016. As Docker CLI works with Docker daemon via REST API it can work with both Windows and Linux daemons by switching between them.
# 
# In this BLOG Post (Build LOG post) we'll glance at some Docker CE features available on AppVeyor build workers and test a simple scenario with Linux containers - we will spawn two Linux containers with MySQL 5.6 and MySQL 5.7 and make sure both MySQL instances can be connected from a Windows host VM.
# 
# Linux containers are currently available on our new type of build VMs ("Premium" workers). Premium workers have more CPU, RAM and nested virtualization enabled:

- ps: gcim Win32_Processor | % { "$($_.NumberOfCores) cores" }
- ps: gcim Win32_OperatingSystem | % { "$([int]($_.TotalVisibleMemorySize/1mb)) Gb" }

# More CPU cores means more compute power to your builds. There are so many tasks that can't be speed up by splitting them to multiple build jobs, but can benefit from more CPUs, for example compilation of large projects or running compute-intensive tests.
# Some customers using Premium workers seen almost twice faster builds!
#
# PLEASE NOTE: Premium workers are currently in private beta. Drop us email at team@appveyor.com if you want to participate.

- ps: _
# some popular images are pre-installed
- docker images

- ps: _
# let's test Windows containers
- docker run microsoft/nanoserver cmd /c dir

- ps: _
# now, we are switching to Linux Containers mode
# it will take around a minute to start MobyLinuxVM
# drive X: is shared to allow Linux containers mapping volumes on Windows host machine
- docker-switch-linux

- ps: _
# ensure that we can read host's file system
- docker run --rm -v x:/host:/host ubuntu ls /host

- ps: _
# try some more advance Linux container example
- docker run --rm -v x:/host:/host ubuntu /bin/bash -c "ls /host && apt-get update && apt-get -y install net-tools && ifconfig"

- ps: _
# start MySQL 5.6 and 5.7 containers in detached mode
# map port 3306 of each container to a respective port of Windows host VM
- docker run --detach --name=mysql-5.7 --env="MYSQL_ROOT_PASSWORD=Password12!" --publish 6603:3306 mysql:5.7
- docker run --detach --name=mysql-5.6 --env="MYSQL_ROOT_PASSWORD=Password12!" --publish 6604:3306 mysql:5.6

- ps: _
# give'em some time to start
- ps: Start-Sleep -s 20

- ps: _
# display running containers
- docker ps

- ps: _
# ensure we can access both MySQL instances from Windows host
- '"C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\\mysql" -uroot -pPassword12! -h localhost -P 6603 -e "SELECT @@version;"'
- '"C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\\mysql" -uroot -pPassword12! -h localhost -P 6604 -e "SELECT @@version;"'
