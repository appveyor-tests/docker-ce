build_script:
- ps: . .\load-narrative.ps1

test_script:

- ps: _
# Docker CE (Community Edition) can run both Windows and Linux containers on the same machine and its Edge version could be installed on Windows Server 2016. To run Linux containers Docker CE provisions "MobyLinux" Hyper-V VM with Linux and Docker daemon installed.
# Windows containers are natively supported in Windows Server 2016. As Docker CLI works with Docker daemon via REST API it can work with both Windows and Linux daemons by switching between them.
# 
# In this BLOG Post (Build LOG post) we'll glance at some Docker CE features available on AppVeyor build workers and test a simple scenario with Linux containers - we will spawn two Linux containers with MySQL 5.6 and MySQL 5.7 and make sure both MySQL instances can be connected from a Windows host VM.
# 
# Linux containers are currently available on our new type of build VMs ("Premium" workers). Premium workers have more CPU, RAM and nested virtualization enabled:

- ps: gcim Win32_Processor | % { "$($_.NumberOfCores) cores" }
- ps: gcim Win32_OperatingSystem | % { "$([int]($_.TotalVisibleMemorySize/1mb)) Gb" }

- ps: _
# More CPU cores means more compute power to your builds. There are so many tasks that can't be speed up by splitting them to multiple build jobs, but can benefit from more CPUs, for example compilation of large projects or running compute-intensive tests.
# Some customers using Premium workers seen almost twice faster builds!
# 
# PLEASE NOTE: Premium workers are currently in private beta. Drop us email at team@appveyor.com if you want to participate.
# 
# When the build starts Docker is in Windows mode. See the OS of server Engine:
- docker version

- ps: _
# For Windows containers we've got some popular images pre-installed:
- docker images

- ps: _
# OK, let's make sure Windows containers are working by running a simple "dir" command inside NanoServer containers:
- docker run microsoft/nanoserver cmd /c dir

- ps: _
# Now let's switch Docker to Linux containers mode!
# 
# For switching between Windows and Linux modes AppVeyor provides two sets of commands.
# 
# PowerShell:
#   Switch-DockerWindows       - switch Docker to Windows mode
#   Switch-DockerLinux         - switch Docker to Linux mode
# CMD:
#   docker-switch-windows      - switch Docker to Windows mode
#   docker-switch-linux        - switch Docker to Linux mode
# 
# Switching Docker to Linux for the first time takes around a minute. This is the time required to start "MobyLinuxVM" VM:
- docker-switch-linux

- ps: _
# Drive X: is shared to allow Linux containers mapping volumes to directories located on Windows host machine.
# There is "X:\host" folder pre-created for you. The maximum size of X: drive is 5 GB.
# 
# Let's run a container with Ubuntu 18.04, map `X:\host` as `/host` inside container and see if we can read the contents of `X:\host` folder:
- docker run --rm -v x:/host:/host ubuntu ls /host

- ps: _
# Trying some more advanced Linux container example:
- docker run --rm -v x:/host:/host ubuntu /bin/bash -c "ls /host && apt-get update && apt-get -y install net-tools && ifconfig"

- ps: _
# Now, we are starting two MySQL 5.6 and 5.7 containers in detached mode.
# We are mapping port 3306 of each container to respective ports of Windows host VM.
# 
# MySQL 5.7 instance on one container will be mapped to 6603 local port:
- docker run --detach --name=mysql-5.7 --env="MYSQL_ROOT_PASSWORD=Password12!" --publish 6603:3306 mysql:5.7

- ps: _
# MySQL 5.6 instance will be mapped to 6604 local port:
- docker run --detach --name=mysql-5.6 --env="MYSQL_ROOT_PASSWORD=Password12!" --publish 6604:3306 mysql:5.6

- ps: _
# Give MySQL instances inside containers some time to start ...
- ps: Start-Sleep -s 20

- ps: _
# Make sure both containers are running:
- docker ps

- ps: _
# Now, using MySQL command line client located on Windows build VM we are going to check if we can access both MySQL instances:
- 'set PATH=C:\Program Files\MySQL\MySQL Server 5.7\bin;%PATH%'

- ps: _
# Connecting to MySQL 5.7:
- mysql -uroot -pPassword12! -h localhost -P 6603 -e "SELECT @@version;"

- ps: _
# Connecting to MySQL 5.7:
- mysql -uroot -pPassword12! -h localhost -P 6604 -e "SELECT @@version;"

- ps: _
# That's all for today!
